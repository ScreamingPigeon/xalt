COPY_LIBS_TO_XALT := $(PY_BUILD_TOOLS)/copy_system_library_to_xalt.py
FIND_LIBS_TO_XALT := $(PY_BUILD_TOOLS)/find_required_libraries.py
THIS_DIR    	  := $(PARENT_DIR)/src
VPATH       	   = .:$(THIS_DIR)
CC          	  := gcc
CXX         	  := g++
OPTLVL      	  := -g -O0
LIB_OPTIONS 	  := -fPIC -shared
WARN_FLAGS  	  := -Wall -Wno-unused-result -Wno-unused-value -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0
CF_INIT     	  := -I. -fPIC $(EXTRA_FLAGS)
COMMON_FLGS 	  := $(OPTLVL) $(WARN_FLAGS)  $(CF_INIT)
CXXFLAGS    	  := $(COMMON_FLGS) -std=c++11

ifeq ($(HAVE_DCGM),yes)
  LIBDCGM:=-ldl
endif
ifeq ($(HAVE_NVML),yes)
  LIBNVML:=-ldl
endif

ifneq ($(MY_HOSTNAME_PARSER),no)
   HAVE_EXTERNAL_HOSTNAME_PARSER := -DHAVE_EXTERNAL_HOSTNAME_PARSER
   PARSER_TYPE                   := $(firstword $(subst :, ,$(MY_HOSTNAME_PARSER)))
   ifeq ($(PARSER_TYPE),c_file)
      MY_HOSTNAME_PARSER_SRC     := $(lastword  $(subst :, ,$(MY_HOSTNAME_PARSER)))
      MY_HOSTNAME_PARSER_OBJ     := $(DESTDIR)$(LIB64)/my_hostname_parser.o
      MY_HOSTNAME_PARSER_OBJ_32  := $(DESTDIR)$(LIB)/my_hostname_parser_32.o
   endif
   ifeq ($(PARSER_TYPE),library)
      MY_HOSTNAME_PARSER_LIBRARY := $(word  2, $(subst :, ,$(MY_HOSTNAME_PARSER)))
      MY_HOSTNAME_PARSER_LIB32   := $(word  3, $(subst :, ,$(MY_HOSTNAME_PARSER)))
      MY_HOSTNAME_PARSER_TARGET  := my_hostname_parser_target
      ifneq ($(MY_HOSTNAME_PARSER_LIB32),)
         MY_HOSTNAME_PARSER_TARGET  += my_hostname_parser_target_32
      endif
      MY_HOSTNAME_PARSER_OBJ     := $(DESTDIR)$(LIB64)/my_hostname_parser.a
      MY_HOSTNAME_PARSER_OBJ_32  := $(DESTDIR)$(LIB)/my_hostname_parser_32.a
   endif
endif

#CFLAGS      	  := --std=gnu99 $(COMMON_FLGS) $(HAVE_EXTERNAL_HOSTNAME_PARSER)
CFLAGS      	  :=             $(COMMON_FLGS) $(HAVE_EXTERNAL_HOSTNAME_PARSER)

# Collect information from each module in these four variables.
# Initialize them here as simple variables.

programs     :=
c_sources    :=
cxx_sources  :=
libraries    :=
extra_clean  :=
so_libs      :=

ifeq ($(XALT_USE_32BIT),no)
  HAVE_32BIT := no
  DEP32      := 
  OBJ32      := 
endif

ifeq ($(HAVE_32BIT),yes)
  DEP32      = $(subst .c,.d32,$(c_sources))
  OBJ32      = $(subst .c,.o32,$(c_sources))
endif

dependencies = $(subst .c,.d,$(c_sources)) $(subst .C,.d,$(cxx_sources)) $(DEP32)
objects      = $(subst .c,.o,$(c_sources)) $(subst .C,.o,$(cxx_sources)) $(OBJ32)

include_dirs := linker util libxalt
include_dirs :=  __build__ $(addprefix $(THIS_DIR)/, $(include_dirs))

CPPFLAGS     += $(addprefix -I, $(include_dirs))

vpath %.h $(include_dirs) 
vpath %.c $(include_dirs)
vpath %.C $(include_dirs)

all:

ifeq "$(MAKECMDGOALS)" "neat"
  INCLUDE_DEPS := no
endif

ifeq "$(MAKECMDGOALS)" "clean"
  INCLUDE_DEPS := no
endif

ifeq "$(MAKECMDGOALS)" "clobber"
  INCLUDE_DEPS := no
endif

include linker/module.mk
include util/module.mk
include libxalt/module.mk

ifneq ($(INCLUDE_DEPS),no)
  -include $(dependencies)
endif


.PHONY: all
all: $(MY_HOSTNAME_PARSER_TARGET) build_all COPY_ALL_LIBS

build_all: ECHO $(programs) $(libraries)  \
           $(DESTDIR)$(SITE_PKG_DIR)/xalt_python_pkg_filter.py

COPY_ALL_LIBS: build_all
	REQ_LIBS=`$(FIND_LIBS_TO_XALT) $(programs) $(so_libs)`;        \
	for i in $$REQ_LIBS; do                                        \
          baseNM="$${i##*/}";                                          \
	  if [ ! -f $(DESTDIR)$(LIB64)/$$baseNM ]; then                \
            install -m $(MODE_X) $$i $(DESTDIR)$(LIB64);               \
          fi;                                                          \
        done
	STATUS="";                                                     \
	for i in $(CRYPTO_STR) $(UUID_STR) $(CURL_STR) $(GPU_STR) ; do \
	  baseNM="$${i%%:*}";                                          \
          realNM="$${i##*:}";                                          \
	  $(COPY_LIBS_TO_XALT) --lib64 $(DESTDIR)$(LIB64) --verbose    \
                               --base $$baseNM                         \
                               --real $$realNM;                        \
	  if [ $$? != 0 ]; then STATUS=FAILURE; break; fi              \
        done;                                                          \
        if [ -n "$$STATUS" ]; then                                     \
           echo "Failed to copy libraries into $(DESTDIR)$(LIB64)";    \
           false;                                                      \
        fi

%.d: %.c
	@rm -f $@;                                                       \
        $(CC) -MM $(CPPFLAGS) $(CFLAGS) $< > $@.$$$$;                    \
        sed 's,\($(notdir $*)\.o\) *:,$(dir $@)\1 $@: ,' < $@.$$$$ > $@; \
        rm -f $@.$$$$

%.d32: %.c
	@rm -f $@;                                                           \
        $(CC) -MM $(CPPFLAGS) $(CFLAGS) $< > $@.$$$$;                        \
        sed 's,\($(notdir $*)\)\.o *:,$(dir $@)\1.o32 $@: ,' < $@.$$$$ > $@; \
        rm -f $@.$$$$

%.d: %.C
	@rm -f $@;                                                       \
        $(CXX) -MM $(CPPFLAGS) $(CXXFLAGS) $< > $@.$$$$;                 \
        sed 's,\($(notdir $*)\.o\) *:,$(dir $@)\1 $@: ,' < $@.$$$$ > $@; \
        rm -f $@.$$$$

%.o32: %.c
	$(CC) -m32 -DWITH_32BIT=1 $(CPPFLAGS) $(CFLAGS) -c -o $@ $<



ECHO:
	@echo "XALT_EXECUTABLE_TRACKING: '$(XALT_EXECUTABLE_TRACKING)'"

echo:
	@echo "INCLUDE_DEPS:   $(INCLUDE_DEPS)"
	@echo "HAVE_32BIT:     $(HAVE_32BIT)"
	@echo "XALT_USE_32BIT: $(XALT_USE_32BIT)"
	@echo "OBJ32:          $(OBJ32)"

neat:
	$(RM) linker/*~ util/*~ libxalt/*~ tmpl/*~ *~

clean:  echo
	$(RM) $(objects) $(dependencies) $(extra_clean)
	$(RM) linker/*.d.[0-9][0-9]* util/*.d.[0-9][0-9]* libxalt/*.d.[0-9][0-9]* 
	$(RM) linker/*.d32.[0-9][0-9]* util/*.d32.[0-9][0-9]* libxalt/*.d32.[0-9][0-9]* 
	$(RM) __build__/*.o __build__/*.o32  __build__/*.d __build__/*.d32 

clobber:
	$(RM) $(programs) $(libraries)  
	$(RM) -rf __build__


$(DESTDIR)$(SITE_PKG_DIR)/xalt_python_pkg_filter.py: __build__/xalt_python_pkg_filter.py
	install -m $(MODE_R) $^ $@

my_hostname_parser_target: 
	install -m $(MODE_R) $(MY_HOSTNAME_PARSER_LIBRARY)   $(DESTDIR)$(LIB64)/my_hostname_parser.a

my_hostname_parser_target_32: 
	install -m $(MODE_R) $(MY_HOSTNAME_PARSER_LIB32)     $(DESTDIR)$(LIB)/my_hostname_parser_32.a
